// Code generated by protoc-gen-go.
// source: github.com/micro/hailo-srv/proto/auth/auth.proto
// DO NOT EDIT!

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/hailo-srv/proto/auth/auth.proto

It has these top-level messages:
	TestRequest
	TestResponse
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestRequest struct {
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TestResponse struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *TestResponse) Reset()                    { *m = TestResponse{} }
func (m *TestResponse) String() string            { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()               {}
func (*TestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*TestRequest)(nil), "TestRequest")
	proto.RegisterType((*TestResponse)(nil), "TestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Auth service

type AuthClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...client.CallOption) (*TestResponse, error)
}

type authClient struct {
	c           client.Client
	serviceName string
}

func NewAuthClient(serviceName string, c client.Client) AuthClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &authClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authClient) Test(ctx context.Context, in *TestRequest, opts ...client.CallOption) (*TestResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Auth.Test", in)
	out := new(TestResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	Test(context.Context, *TestRequest, *TestResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler) {
	s.Handle(s.NewHandler(&Auth{hdlr}))
}

type Auth struct {
	AuthHandler
}

func (h *Auth) Test(ctx context.Context, in *TestRequest, out *TestResponse) error {
	return h.AuthHandler.Test(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xcd, 0x4c, 0x2e, 0xca, 0xd7, 0xcf, 0x48, 0xcc,
	0xcc, 0xc9, 0xd7, 0x2d, 0x2e, 0x2a, 0xd3, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0x2c, 0x2d,
	0xc9, 0x00, 0x13, 0x7a, 0x60, 0xbe, 0x12, 0x2f, 0x17, 0x77, 0x48, 0x6a, 0x71, 0x49, 0x50, 0x6a,
	0x61, 0x29, 0x90, 0x52, 0x92, 0xe3, 0xe2, 0x81, 0x70, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85,
	0xf8, 0xb8, 0xd8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x8d,
	0x74, 0xb9, 0x58, 0x1c, 0x81, 0x9a, 0x85, 0x54, 0xb9, 0x58, 0x40, 0xea, 0x84, 0x78, 0xf4, 0x90,
	0x74, 0x4b, 0xf1, 0xea, 0x21, 0x6b, 0x56, 0x62, 0x48, 0x62, 0x03, 0x5b, 0x62, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x38, 0x36, 0x39, 0x8a, 0x98, 0x00, 0x00, 0x00,
}
