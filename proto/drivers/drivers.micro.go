// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/hailo-srv/proto/drivers/drivers.proto

/*
Package drivers is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/hailo-srv/proto/drivers/drivers.proto

It has these top-level messages:
	Eta
	Driver
	EtaRequest
	EtaResponse
	NearRequest
	NearResponse
*/
package drivers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Drivers service

type DriversService interface {
	Eta(ctx context.Context, in *EtaRequest, opts ...client.CallOption) (*EtaResponse, error)
	Near(ctx context.Context, in *NearRequest, opts ...client.CallOption) (*NearResponse, error)
}

type driversService struct {
	c           client.Client
	serviceName string
}

func DriversServiceClient(serviceName string, c client.Client) DriversService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "drivers"
	}
	return &driversService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *driversService) Eta(ctx context.Context, in *EtaRequest, opts ...client.CallOption) (*EtaResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Drivers.Eta", in)
	out := new(EtaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driversService) Near(ctx context.Context, in *NearRequest, opts ...client.CallOption) (*NearResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Drivers.Near", in)
	out := new(NearResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Drivers service

type DriversHandler interface {
	Eta(context.Context, *EtaRequest, *EtaResponse) error
	Near(context.Context, *NearRequest, *NearResponse) error
}

func RegisterDriversHandler(s server.Server, hdlr DriversHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Drivers{hdlr}, opts...))
}

type Drivers struct {
	DriversHandler
}

func (h *Drivers) Eta(ctx context.Context, in *EtaRequest, out *EtaResponse) error {
	return h.DriversHandler.Eta(ctx, in, out)
}

func (h *Drivers) Near(ctx context.Context, in *NearRequest, out *NearResponse) error {
	return h.DriversHandler.Near(ctx, in, out)
}
